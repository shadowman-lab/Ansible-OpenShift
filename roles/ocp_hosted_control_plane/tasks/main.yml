---
- name: OCP Block
  block:

  - name: Login to OpenShift
    redhat.openshift.openshift_auth:
      host: "{{ openshift_fqdn }}"
      username: "{{ openshift_user }}"
      password: "{{ openshift_password }}"
      validate_certs: false
    register: openshift_auth_results

  - name: Get Agents
    kubernetes.core.k8s_info:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      api_version: agent-install.openshift.io/v1beta1
      kind: Agent
      validate_certs: false
    register: output

  - name: Set name of non approved host
    ansible.builtin.set_fact:
      unapproved_host: "{{ item.metadata.name }}"
    when: not item.spec.approved | default(true)
    loop: "{{ output.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Update Host to approved
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      api_version: agent-install.openshift.io/v1beta1
      definition:
        kind: Agent
        metadata:
          name: "{{ unapproved_host }}"
          namespace: shadowman-lab
        spec:
          approved: true
      validate_certs: false
    when: unapproved_host is defined

  - name: Create a k8s namespace
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      name: "{{ vm_name }}"
      validate_certs: false
      api_version: v1
      kind: Namespace
      state: present

  - name: Create Hosted Cluster
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      validate_certs: false
      api_version: hypershift.openshift.io/v1alpha1
      definition:
        kind: HostedCluster
        metadata:
          name: "{{ vm_name }}"
          namespace: "{{ vm_name }}"
          labels:
            "cluster.open-cluster-management.io/clusterset": 'default'
        spec:
          release:
            image: quay.io/openshift-release-dev/ocp-release:{{ version }}-x86_64
          pullSecret:
            name: pullsecret-cluster-{{ vm_name }}
          sshKey:
            name: sshkey-cluster-{{ vm_name }}
          networking:
            podCIDR: 10.132.0.0/14
            serviceCIDR: 172.31.0.0/16
            machineCIDR: 172.16.2.0/24
          platform:
            type: Agent
            agent:
              agentNamespace: 'shadowman-lab'
          infraID: "{{ vm_name }}"
          dns:
            baseDomain: 'apps.hypershift.shadowman.dev'
          services:
          - service: APIServer
            servicePublishingStrategy:
              type: LoadBalancer
          - service: OAuthServer
            servicePublishingStrategy:
              type: Route
          - service: OIDC
            servicePublishingStrategy:
              type: Route
          - service: Konnectivity
            servicePublishingStrategy:
              type: Route
          - service: Ignition
            servicePublishingStrategy:
              type: Route

  - name: Create pull secret
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      validate_certs: false
      definition:
        kind: Secret
        metadata:
          name: pullsecret-cluster-{{ vm_name }}
          namespace: "{{ vm_name }}"
        data:
          '.dockerconfigjson': "{{ pull_secret }}"
        type: kubernetes.io/dockerconfigjson

  - name: Create public key
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      validate_certs: false
      definition:
        kind: Secret
        metadata:
          name: sshkey-cluster-{{ vm_name }}
          namespace: "{{ vm_name }}"
        stringData:
          id_rsa.pub: "{{ public_key }}"

  - name: Create Node Pool
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      api_version: hypershift.openshift.io/v1alpha1
      validate_certs: false
      definition:
        kind: NodePool
        metadata:
          name: nodepool-{{ vm_name }}-1
          namespace: "{{ vm_name }}"
        spec:
          clusterName: "{{ vm_name }}"
          replicas: 1
          management:
            autoRepair: false
            upgradeType: InPlace
          platform:
            type: Agent
            agent:
              agentLabelSelector:
                matchLabels: {}
          release:
            image: quay.io/openshift-release-dev/ocp-release:{{ version }}-x86_64

  - name: Create Managed Cluster
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      api_version: cluster.open-cluster-management.io/v1
      validate_certs: false
      definition:
        kind: ManagedCluster
        metadata:
          annotations:
            import.open-cluster-management.io/hosting-cluster-name: local-cluster 
            import.open-cluster-management.io/klusterlet-deploy-mode: Hosted
            open-cluster-management/created-via: other
          labels:
            cloud: BareMetal
            vendor: OpenShift
            name: "{{ vm_name }}"
          name: "{{ vm_name }}"
        spec:
          hubAcceptsClient: true

  - name: Create KlusterLetAddonConfig
    kubernetes.core.k8s:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      state: present
      api_version: agent.open-cluster-management.io/v1
      validate_certs: false
      definition:
        kind: KlusterletAddonConfig
        metadata:
          name: "{{ vm_name }}"
          namespace: "{{ vm_name }}"
        spec:
          clusterName: "{{ vm_name }}"
          clusterNamespace: "{{ vm_name }}"
          clusterLabels:
            cloud: BareMetal
            vendor: OpenShift
          applicationManager:
            enabled: true
          policyController:
            enabled: true
          searchCollector:
            enabled: true
          certPolicyController:
            enabled: true
          iamPolicyController:
            enabled: true

  - name: Get IP Address
    kubernetes.core.k8s_info:
      api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
      host: "{{ openshift_fqdn }}"
      api_version: v1
      kind: Service
      namespace: "{{ vm_name }}-{{ vm_name }}"
      label_selectors:
        - app = kube-apiserver
      validate_certs: false
    register: ipaddr
    until: ipaddr.resources[0] is defined
    retries: 60
    delay: 10

  - name: Set IP Address
    ansible.builtin.set_stats:
      data:
        apiip: "{{ ipaddr.resources[0].status.loadBalancer.ingress[0].ip }}"
      per_host: false

  always:
    - name: If login succeeded, try to log out (revoke access token)
      redhat.openshift.openshift_auth:
        state: absent
        host: "{{ openshift_fqdn }}"
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        validate_certs: false
      when: openshift_auth_results.openshift_auth.api_key is defined
